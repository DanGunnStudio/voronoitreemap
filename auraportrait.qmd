---
title: "voronoitreemap"
format: html
editor: visual
---

```{r}
required_packages <- c("tidyverse", 
                       "voronoiTreemap",
                       "magick",
                       "WeightedTreemaps",
                       "viridis")

for (pkg in required_packages) {
  if (!requireNamespace(pkg, quietly = TRUE)) {
    install.packages(pkg)
  }
  library(pkg, character.only = TRUE)
}
```

## About:

Trying to create a program to replicate the "aura portrait" from *"Reading the Auras of Democrats and Republicans on the Eve of the Election"* in the [NY Times](https://www.nytimes.com/2024/11/04/opinion/democrat-republican-election-vibes.html). Specifically this is intended to represent sentiment data from NLP.

### Getting data

## voronoiTreemap package

```{r}
canada
```

```{r}
ExampleGDP
```

```{r}
vt_d3(vt_export_json(vt_testdata()))
```

limited to circles?

```{r}

```

## WeightedTreemaps package

Allows custom shapes.

```{r}
#custom rectangle shape
rect_coords <- list(
  x = c(0, 8, 8, 0),
  y = c(0, 0, 10, 10))
```

```{r}
# set seed to obtain same df every time
set.seed(123)
df <- data.frame(A = sample(10:100, 45))

#calculates the treemap
tm2 <- voronoiTreemap(data = df, levels = "A",
  shape = rect_coords)

# Save the plot as a PNG file
png("charts/treemap_output.png", width = 600, height = 800)

#draws the treemap
# drawTreemap(tm2, 
#             add = TRUE, 
#             layout = c(1,1), 
#             position = c(1, 1))

drawTreemap(tm2, 
            title = "treemap 4", 
            title_color = "black", 
            label_size = 1,
            color_type = "cell_size", 
            color_level = 1,
            color_palette = heat.colors(10),
            border_color =NULL, #deleting the border
            label_color = "white",
            add = TRUE, 
            layout = c(1, 1), 
            position = c(1, 1),
            legend = TRUE
            )

# Turn off the device
dev.off()

```

```{r}
class(tm2)
class(treemap2) #null class, meaning that I have to save it from the viewer
```

## Adding custom data.

```{r}
aura_data <- read_csv("raw_data/FingerPaint_Aura/Sheet 1-superstore.csv")
```

```{r}
aura_data_tree <- aura_data |>
  rename(h1 = "Sentiment",
         h2 = Sentiment,
         h3 = Emotion,
         color = Color,
         weight = Frequency)|>
  mutate(h1 = as.character("Sentiment"),
         codes = h3)|>
  select(h1,h2,h3, color,weight, codes)
```

### Calculating a Voronoi Treemap

```{r}
#calculates the treemap
tm_aura <- voronoiTreemap(data = aura_data, 
                          cell_size = "Frequency",
                          levels = "Emotion",
                          shape = rect_coords)

```

### Choosing a palette

```{r}
categories <- aura_data |> pull(Emotion) |> unique()
color_palette <- viridis(length(categories), option = "H")

named_palette <- setNames(color_palette, categories)

named_palette

named_palette_2 <-setNames( aura_data$Color, aura_data$Emotion)
named_palette_2 
```

### Drawing the treemap

```{r}
# Save the plot as a PNG file
png("charts/treemap_aura.png", width = 800, height = 1000)

drawTreemap(tm_aura, 
            levels = 1:length(tm_aura@call$levels),
            # title = "Aura Portrait", 
            # title_color = "black", 
            # title_size = 2,
            label_size = 2,
            label_level = 1,
            color_type = "categorical", 
            #color_level = 1,
            color_palette = named_palette_2,
            border_color =NULL, #deleting the border
            label_color = NULL,
            #layout = c(1, 1), 
           # position = c(1, 1),
            legend = FALSE)

# Turn off the device
dev.off()
```

### Storing Label names and locations for la

```{r}
label_positions <- purrr::map_dfr(names(tm_aura@cells), function(cell_name) {
  cell_data <- tm_aura@cells[[cell_name]]
  tibble::tibble(
    label = cell_data$name,
    x = cell_data$site[1],
    y = cell_data$site[2]
  )
})
```

## Reading the PNG with magick package

```{r}
treemap_aura_temp <- image_read("charts/treemap_aura.png")
treemap_aura_temp
```

```{r}
treemap_aura <- image_trim(treemap_aura_temp)
treemap_aura
```

Using several motion blurs consecutively

```{r}
aura_motion_blur <- image_motion_blur(image = treemap_aura,
                  20,
                  110,
                  45)|>
  image_motion_blur(
                  45,
                  120,
                  90)|>
    image_motion_blur(
                  90,
                  30,
                  180)

aura_motion_blur 
```

### Saving motion blur version

```{r}
image_write(aura_motion_blur, path = "charts/aura_motion_blur.png")
```

### Scaling label positions

```{r}

image_info <- image_info(aura_motion_blur)
image_width <- image_info$width
image_height <- image_info$height

scaled_label_positions <- label_positions |>
  mutate(
    x_pixel = x / 1800 * image_width,  # Scale x to image width
    y_pixel = y / 2000 * image_height  # Scale y to image height
  )
```

```{r}

```

### Add labels

```{r}
blurred_image <- aura_motion_blur  # Assuming this is your blurred base image
canvas <- image_draw(blurred_image)

# Add labels directly on the canvas
for (i in seq_len(nrow(scaled_label_positions))) {
  text(
    x = round(scaled_label_positions$x_pixel[i]),
    y = round(scaled_label_positions$y_y_pixel[i]),
    labels = scaled_label_positions$label[i],
    col = "white",  # Adjust label color
    cex = 1.5       # Adjust label size
  )
}

# Close the drawing device
dev.off()

# Save the final annotated image
image_write(blurred_image, "final_treemap_with_all_labels.png")

# Display the final image
print(blurred_image)
```

```{r}


```

```{r}
image_distort(image = treemap_aura,
              distortion = "perspective",
              coordinates <- c(0, 0, 100, 0, 0, 100, 100, 100,   # Source points
                 10, 10, 90, 10, 10, 90, 90, 80))
```

```{r}
image_morphology(
image = treemap_aura,
method = "convolve",
kernel = "Gaussian",
iterations = 1,
opts = list()
)
```

```{r}
image_distort(image = treemap_aura, 
              distortion = "arc",
              coordinates = c(100))
```

```{r}
image_blur(treemap_aura,
           radius = 25,
           sigma = 5)
```

```{r}

```

```{r}

```

```{r}
image_blank(200, 200, pseudo_image = "gradient:#3498db-#db3a34",
defines = c('gradient:direction' = 'east'))
```

```{r}
image_implode(treemap_aura, factor = 0.1)
```
